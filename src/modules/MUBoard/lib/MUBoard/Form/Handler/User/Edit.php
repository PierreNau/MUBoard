<?php
/**
 * MUBoard.
 *
 * @copyright Michael Ueberschaer
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUBoard
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Sun Oct 14 15:42:51 CEST 2012.
 */

/**
 * This handler class handles the page events of the Form called by the MUBoard_user_edit() function.
 * It collects common functionality required by different object types.
 */
class MUBoard_Form_Handler_User_Edit extends MUBoard_Form_Handler_User_Base_Edit
{
	/**
	 * Initialize form handler.
	 *
	 * This method takes care of all necessary initialisation of our data and form states.
	 *
	 * @return boolean False in case of initialization errors, otherwise true.
	 */
	public function initialize(Zikula_Form_View $view)
	{
		$this->inlineUsage = ((UserUtil::getTheme() == 'Printer') ? true : false);
		$this->idPrefix = $this->request->getGet()->filter('idp', '', FILTER_SANITIZE_STRING);

		// initialise redirect goal
		$this->returnTo = $this->request->getGet()->filter('returnTo', null, FILTER_SANITIZE_STRING);
		// store current uri for repeated creations
		$this->repeatReturnUrl = System::getCurrentURI();

		$this->permissionComponent = $this->name . ':' . $this->objectTypeCapital . ':';

		$entityClass = $this->name . '_Entity_' . ucfirst($this->objectType);
		$objectTemp = new $entityClass();
		$this->idFields = $objectTemp->get_idFields();

		// retrieve identifier of the object we wish to view
		$this->idValues = MUBoard_Util_Controller::retrieveIdentifier($this->request, array(), $this->objectType, $this->idFields);
		$hasIdentifier = MUBoard_Util_Controller::isValidIdentifier($this->idValues);

		$entity = null;
		$this->mode = ($hasIdentifier) ? 'edit' : 'create';

		if ($this->mode == 'edit') {
			if (!SecurityUtil::checkPermission($this->permissionComponent, '::', ACCESS_EDIT)) {
				// set an error message and return false
				return LogUtil::registerPermissionError();
			}

			$entity = $this->initEntityForEdit();

			if ($this->hasPageLockSupport === true && ModUtil::available('PageLock')) {
				// try to guarantee that only one person at a time can be editing this entity
				/*  ModUtil::apiFunc('PageLock', 'user', 'pageLock',
				array('lockName'  => $this->name . $this->objectTypeCapital . $this->createCompositeIdentifier(),
				'returnUrl' => $this->getRedirectUrl(null, $entity))); */
			}
		} else {
			if (!SecurityUtil::checkPermission($this->permissionComponent, '::', ACCESS_ADD)) {
				return LogUtil::registerPermissionError();
			}

			$entity = $this->initEntityForCreation($entityClass);
		}

		$this->view->assign('mode', $this->mode)
		->assign('inlineUsage', $this->inlineUsage);

		$entityData = $entity->toArray();

		// assign data to template as array (makes translatable support easier)
		$this->view->assign($this->objectTypeLower, $entityData);

		// We set text field to empty if entity class is posting
		//if ($this->request->query->filter('ot', 'category', FILTER_SANITIZE_STRING) == 'posting') {
			$entity['text'] = '';
		//}

		// save entity reference for later reuse
		$this->entityRef = $entity;

		$this->initializeAdditions();

		// everything okay, no initialization errors occured
		return true;
	}
}
