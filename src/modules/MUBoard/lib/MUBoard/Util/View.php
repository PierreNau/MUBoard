<?php
/**
 * MUBoard.
 *
 * @copyright Michael Ueberschaer
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUBoard
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Fri Jun 15 09:09:36 CEST 2012.
 */

/**
 * Utility implementation class for view helper methods.
 */
class MUBoard_Util_View extends MUBoard_Util_Base_View
{

	/**
	 *
	 * This method gets the number of issues in an category
	 */
	public static function getIssuesOfCategory($catid)
	{
		// get repositoy for Categories
		$repository = MUBoard_Util_Model::getCategoryRepository();
		// get category by id
		$category = $repository->selectById($catid);
		// get forums of this category
		$forums = $category->getForum();
			
		// get repository for Forums
		$repository2 = MUBoard_Util_Model::getForumRepository();
			
		$count = 0;
			
		// walk through the forums and take their postings
		foreach ($forums as $forum) {
			// get forum by id
			$forum = $repository2->selectById($forum['id']);
			// get postings of this forum
			$postings = $forum->getPosting();
			// we look if postings are parent postings -> issue
			foreach ($postings as $posting) {
				if ($posting['parent_id'] === NULL) {
					$count = $count + 1;
				}
			}
		}
			
		return $count;
			
	}

	/**
	 *
	 * This method gets the number of postings in an category
	 */
	public static function getPostingsOfCategory($catid)
	{
		// get repositoy for Categories
		$repository = MUBoard_Util_Model::getCategoryRepository();
		// get category by id
		$category = $repository->selectById($catid);
		// get forums of this category
		$forums = $category->getForum();
			
		// get repository for Forums
		$repository2 = MUBoard_Util_Model::getForumRepository();
			
		$count = 0;
			
		// walk through the forums and take their postings
		foreach ($forums as $forum) {
			// get forum by id
			$forum = $repository2->selectById($forum['id']);
			// get postings of this forum
			$postings = $forum->getPosting();
			$number = count($postings);

			$count = $count + $number;

		}
			
		return $count;
			
	}

	/**
	 *
	 * This method gets the number of issues in a forum
	 */
	public static function getIssuesOfForum($forumid)
	{

		$count = 0;

		// get repositoy for Forum
		$repository = MUBoard_Util_Model::getForumRepository();
		// get forum by id
		$forum = $repository->selectById($forumid);
		// get forums of this category
		$postings = $forum->getPosting();
		// we look if postings are parent postings -> issue
		foreach ($postings as $posting) {
			if ($posting['parent_id'] === NULL) {
				$count = $count + 1;
			}
		}
			
		return $count;
			
	}

	/**
	 *
	 * This method gets the number of postings in a forum
	 */
	public static function getPostingsOfForum($forumid)
	{
		// get repositoy for Forum
		$repository = MUBoard_Util_Model::getForumRepository();
		// get forum by id
		$forum = $repository->selectById($forumid);
		// get forums of this category
		$postings = $forum->getPosting();
			
		$count = count($postings);
			
		return $count;
			
	}

	/**
	 *
	 * This method gets the number of answers for a posting
	 */
	public static function getAnswersOfPosting($postingid)
	{

		$count = 0;

		// get repositoy for Posting
		$repository = MUBoard_Util_Model::getPostingRepository();
		// get posting by id
		$posting = $repository->selectById($postingid);
		// get answers of this posting
		$children = $posting->getChildren();

		$count = count($children);
			
		return $count;
			
	}

	/**
	 *
	 * This method gets the last posting in a forum
	 */
	public static function getLastPostingOfForum($forumid)
	{
		// get repositoy for forum
		$repository = MUBoard_Util_Model::getForumRepository();
		// get forum by id
		$forum = $repository->selectById($forumid);
		// get postings of this forum
		$postings = $forum->getPosting();
		// we look for the last posting
		$postingid = 0;

		foreach ($postings as $posting) {
			if ($posting['id'] > $postingid) {
				$postingid = $posting['id'];
			}
		}

		// we get a repository for posting
		$repository2 = MUBoard_Util_Model::getPostingRepository();
		// if postingid > 0, we have posting in the forum
		if ($postingid > 0) {
			// we get the last posting
			$lastposting = $repository2->selectById($postingid);
			// we check if last posting is parent or answer
			$parent = $lastposting->getParent_id();
			if ($parent != NULL) {
				$issue = $repository2->selectById($parent);
				$issuetitle = $issue->getTitle();
				$id = $issue->getId();
			}
			else {
				$issuetitle = $lastposting->getTitle();
				$id = $lastposting->getId();
			}
			$url = ModUtil::url('MUBoard', 'user', 'display', array('ot' => 'posting', 'id' => $id));

			$createdDate = $lastposting->getCreatedDate();
			$date = DateUtil::formatDatetime($createdDate, 'datetimelong');
			$uname = UserUtil::getVar('uname', $lastposting['createdUserId']);
			$out = "<div class=''>";
			$out .= __('Last posting by ');
			$out .= $uname;
			$out .= "<br />";
			$out .= __('on ');
			$out .= $date . "<br />";
			$out .= __('Issue: ');
			$out .= "<a href='" . $url;
			$out .= "'>" . $issuetitle . "</a>" ;
			$out .= "</div>";
		}
		else {
			$out = __('No postings available!');
		}
			
		return $out;
			
	}

	/**
	 *
	 * This method gets the state of the category abo
	 */
	public static function getStateOfCategoryAbo($categroyid)
	{
		// get repositoy for Categories
		$repository = MUBoard_Util_Model::getAboRepository();
		// get actual userid
		$userid = UserUtil::getVar('uid');
		// look for abo
		$where = 'tbl.catid = \'' . DataUtil::formatForStore($categoryid) . '\'';
		$where .= ' AND ';
		$where .= 'tbl.userid = \'' . DataUtil::formatForStore($userid) . '\'';
		$abo = $repository->selectWhere($where);

		if (!$abo) {
			$url = ModUtil::url('MUBoard', 'admin', 'take', array('ot' => 'abo', 'category' => $categroyid));
			$out =  "<a id='muboard-user-posting-header-infos-abo' href='{$url}'>
            <img src='/images/icons/extrasmall/mail_post_to.png' />
            </a>";
		}

		if ($abo) {
			$url = ModUtil::url('MUBoard', 'admin', 'quit', array('ot' => 'abo', 'category' => $categroyid));
			$out = "<a id='muboard-user-posting-header-infos-abo' href='{$url}'>
            <img src='/images/icons/extrasmall/mail_get.png' />
            </a>";
		}
			
		return $out;
	}
	
	/**
	 *
	 * This method gets the state of the forum abo
	 */
	public static function getStateOfForumAbo($forumid, $func)
	{
		// get repositoy for Categories
		$repository = MUBoard_Util_Model::getAboRepository();
		// get actual userid
		$userid = UserUtil::getVar('uid');
		// look for abo
		$where = 'tbl.forumid = \'' . DataUtil::formatForStore($forumid) . '\'';
		$where .= ' AND ';
		$where .= 'tbl.userid = \'' . DataUtil::formatForStore($userid) . '\'';
		$abo = $repository->selectWhere($where);

		if (!$abo) {
			$url = ModUtil::url('MUBoard', 'admin', 'take', array('ot' => 'abo', 'forum' => $forumid, 'view' => $func));
			$out =  "<a id='muboard-user-posting-header-infos-abo' href='{$url}'>
            <img src='/images/icons/extrasmall/mail_post_to.png' />
            </a>";
		}

		if ($abo) {
			$url = ModUtil::url('MUBoard', 'admin', 'quit', array('ot' => 'abo', 'forum' => $forumid, 'view' => $func));
			$out = "<a id='muboard-user-posting-header-infos-abo' href='{$url}'>
            <img src='/images/icons/extrasmall/mail_get.png' />
            </a>";
		}
			
		return $out;
	}

	/**
	 *
	 * This method gets the state of the posting abo
	 */
	public static function getStateOfPostingAbo($postingid)
	{
		// get repositoy for Categories
		$repository = MUBoard_Util_Model::getAboRepository();
		// get actual userid
		$userid = UserUtil::getVar('uid');
		// look for abo
		$where = 'tbl.postingid = \'' . DataUtil::formatForStore($postingid) . '\'';
		$where .= ' AND ';
		$where .= 'tbl.userid = \'' . DataUtil::formatForStore($userid) . '\'';
		$abo = $repository->selectWhere($where);

		if (!$abo) {
			$url = ModUtil::url('MUBoard', 'admin', 'take', array('ot' => 'abo', 'posting' => $postingid));
			$out =  "<a id='muboard-user-posting-header-infos-abo' href='{$url}'>
            <img src='/images/icons/extrasmall/mail_post_to.png' />
            </a>";
		}

		if ($abo) {
			$url = ModUtil::url('MUBoard', 'admin', 'quit', array('ot' => 'abo', 'posting' => $postingid));
			$out = "<a id='muboard-user-posting-header-infos-abo' href='{$url}'>
            <img src='/images/icons/extrasmall/mail_get.png' />
            </a>";
		}
			
		return $out;
	}
}
