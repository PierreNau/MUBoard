<?php
/**
 * MUBoard.
 *
 * @copyright Michael Ueberschaer
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUBoard
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Sun Oct 14 15:42:51 CEST 2012.
 */

/**
 * Version information base class.
 */
class MUBoard_Base_Version extends Zikula_AbstractVersion
{
    public function getMetaData()
    {
        $meta = array();
        // the current module version
        $meta['version'] = '1.0.0';
        // the displayed name of the module
        $meta['displayname'] = $this->__('MUBoard');
        // the module description
        $meta['description'] = $this->__('MUBoard module generated by ModuleStudio 0.5.4.');
        //! url version of name, should be in lowercase without space
        $meta['url'] = $this->__('muboard');
        // core requirement
        $meta['core_min'] = '1.3.1'; // requires minimum 1.3.1 or later
        $meta['core_max'] = '1.3.99'; // not ready for 1.4.0 yet

        // define special capabilities of this module
        $meta['capabilities'] = array(
            HookUtil::SUBSCRIBER_CAPABLE => array('enabled' => true) /*,
             HookUtil::PROVIDER_CAPABLE => array('enabled' => true), // TODO: see #15
             'authentication' => array('version' => '1.0'),
             'profile'        => array('version' => '1.0', 'anotherkey' => 'anothervalue'),
             'message'        => array('version' => '1.0', 'anotherkey' => 'anothervalue')
             */
        );

        // permission schema
        // DEBUG: permission schema aspect starts
        $meta['securityschema'] = array(
            'MUBoard::'               => '::',

            'MUBoard:Category:'       => 'CategoryID::',
            'MUBoard:Category:Forum'  => 'CategoryID:ForumID:',

            'MUBoard:Forum:'          => 'ForumID::',
            'MUBoard:Posting:Posting' => 'PostingID:PostingID:',
            'MUBoard:Forum:Posting'   => 'ForumID:PostingID:',

            'MUBoard:Posting:'        => 'PostingID::',
            'MUBoard:Abo:'            => 'AboID::',
            'MUBoard:Rank:User'       => 'RankID:UserID:',

            'MUBoard:User:'           => 'UserID::',
            'MUBoard:Rank:'           => 'RankID::'
        );
        // DEBUG: permission schema aspect ends

        return $meta;
    }

    /**
     * Define hook subscriber bundles.
     */
    protected function setupHookBundles()
    {

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.muboard.ui_hooks.categories', 'ui_hooks', __('muboard Categories Display Hooks'));
        // Display hook for view/display templates.
        $bundle->addEvent('display_view', 'muboard.ui_hooks.categories.display_view');
        // Display hook for create/edit forms.
        $bundle->addEvent('form_edit', 'muboard.ui_hooks.categories.form_edit');
        // Display hook for delete dialogues.
        $bundle->addEvent('form_delete', 'muboard.ui_hooks.categories.form_delete');
        // Validate input from an ui create/edit form.
        $bundle->addEvent('validate_edit', 'muboard.ui_hooks.categories.validate_edit');
        // Validate input from an ui create/edit form (generally not used).
        $bundle->addEvent('validate_delete', 'muboard.ui_hooks.categories.validate_delete');
        // Perform the final update actions for a ui create/edit form.
        $bundle->addEvent('process_edit', 'muboard.ui_hooks.categories.process_edit');
        // Perform the final delete actions for a ui form.
        $bundle->addEvent('process_delete', 'muboard.ui_hooks.categories.process_delete');
        $this->registerHookSubscriberBundle($bundle);

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.muboard.filter_hooks.categories', 'filter_hooks', __('muboard Categories Filter Hooks'));
        // A filter applied to the given area.
        $bundle->addEvent('filter', 'muboard.filter_hooks.categories.filter');
        $this->registerHookSubscriberBundle($bundle);

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.muboard.ui_hooks.forums', 'ui_hooks', __('muboard Forums Display Hooks'));
        // Display hook for view/display templates.
        $bundle->addEvent('display_view', 'muboard.ui_hooks.forums.display_view');
        // Display hook for create/edit forms.
        $bundle->addEvent('form_edit', 'muboard.ui_hooks.forums.form_edit');
        // Display hook for delete dialogues.
        $bundle->addEvent('form_delete', 'muboard.ui_hooks.forums.form_delete');
        // Validate input from an ui create/edit form.
        $bundle->addEvent('validate_edit', 'muboard.ui_hooks.forums.validate_edit');
        // Validate input from an ui create/edit form (generally not used).
        $bundle->addEvent('validate_delete', 'muboard.ui_hooks.forums.validate_delete');
        // Perform the final update actions for a ui create/edit form.
        $bundle->addEvent('process_edit', 'muboard.ui_hooks.forums.process_edit');
        // Perform the final delete actions for a ui form.
        $bundle->addEvent('process_delete', 'muboard.ui_hooks.forums.process_delete');
        $this->registerHookSubscriberBundle($bundle);

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.muboard.filter_hooks.forums', 'filter_hooks', __('muboard Forums Filter Hooks'));
        // A filter applied to the given area.
        $bundle->addEvent('filter', 'muboard.filter_hooks.forums.filter');
        $this->registerHookSubscriberBundle($bundle);

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.muboard.ui_hooks.postings', 'ui_hooks', __('muboard Postings Display Hooks'));
        // Display hook for view/display templates.
        $bundle->addEvent('display_view', 'muboard.ui_hooks.postings.display_view');
        // Display hook for create/edit forms.
        $bundle->addEvent('form_edit', 'muboard.ui_hooks.postings.form_edit');
        // Display hook for delete dialogues.
        $bundle->addEvent('form_delete', 'muboard.ui_hooks.postings.form_delete');
        // Validate input from an ui create/edit form.
        $bundle->addEvent('validate_edit', 'muboard.ui_hooks.postings.validate_edit');
        // Validate input from an ui create/edit form (generally not used).
        $bundle->addEvent('validate_delete', 'muboard.ui_hooks.postings.validate_delete');
        // Perform the final update actions for a ui create/edit form.
        $bundle->addEvent('process_edit', 'muboard.ui_hooks.postings.process_edit');
        // Perform the final delete actions for a ui form.
        $bundle->addEvent('process_delete', 'muboard.ui_hooks.postings.process_delete');
        $this->registerHookSubscriberBundle($bundle);

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.muboard.filter_hooks.postings', 'filter_hooks', __('muboard Postings Filter Hooks'));
        // A filter applied to the given area.
        $bundle->addEvent('filter', 'muboard.filter_hooks.postings.filter');
        $this->registerHookSubscriberBundle($bundle);

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.muboard.ui_hooks.abos', 'ui_hooks', __('muboard Abos Display Hooks'));
        // Display hook for view/display templates.
        $bundle->addEvent('display_view', 'muboard.ui_hooks.abos.display_view');
        // Display hook for create/edit forms.
        $bundle->addEvent('form_edit', 'muboard.ui_hooks.abos.form_edit');
        // Display hook for delete dialogues.
        $bundle->addEvent('form_delete', 'muboard.ui_hooks.abos.form_delete');
        // Validate input from an ui create/edit form.
        $bundle->addEvent('validate_edit', 'muboard.ui_hooks.abos.validate_edit');
        // Validate input from an ui create/edit form (generally not used).
        $bundle->addEvent('validate_delete', 'muboard.ui_hooks.abos.validate_delete');
        // Perform the final update actions for a ui create/edit form.
        $bundle->addEvent('process_edit', 'muboard.ui_hooks.abos.process_edit');
        // Perform the final delete actions for a ui form.
        $bundle->addEvent('process_delete', 'muboard.ui_hooks.abos.process_delete');
        $this->registerHookSubscriberBundle($bundle);

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.muboard.filter_hooks.abos', 'filter_hooks', __('muboard Abos Filter Hooks'));
        // A filter applied to the given area.
        $bundle->addEvent('filter', 'muboard.filter_hooks.abos.filter');
        $this->registerHookSubscriberBundle($bundle);

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.muboard.ui_hooks.users', 'ui_hooks', __('muboard Users Display Hooks'));
        // Display hook for view/display templates.
        $bundle->addEvent('display_view', 'muboard.ui_hooks.users.display_view');
        // Display hook for create/edit forms.
        $bundle->addEvent('form_edit', 'muboard.ui_hooks.users.form_edit');
        // Display hook for delete dialogues.
        $bundle->addEvent('form_delete', 'muboard.ui_hooks.users.form_delete');
        // Validate input from an ui create/edit form.
        $bundle->addEvent('validate_edit', 'muboard.ui_hooks.users.validate_edit');
        // Validate input from an ui create/edit form (generally not used).
        $bundle->addEvent('validate_delete', 'muboard.ui_hooks.users.validate_delete');
        // Perform the final update actions for a ui create/edit form.
        $bundle->addEvent('process_edit', 'muboard.ui_hooks.users.process_edit');
        // Perform the final delete actions for a ui form.
        $bundle->addEvent('process_delete', 'muboard.ui_hooks.users.process_delete');
        $this->registerHookSubscriberBundle($bundle);

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.muboard.filter_hooks.users', 'filter_hooks', __('muboard Users Filter Hooks'));
        // A filter applied to the given area.
        $bundle->addEvent('filter', 'muboard.filter_hooks.users.filter');
        $this->registerHookSubscriberBundle($bundle);

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.muboard.ui_hooks.ranks', 'ui_hooks', __('muboard Ranks Display Hooks'));
        // Display hook for view/display templates.
        $bundle->addEvent('display_view', 'muboard.ui_hooks.ranks.display_view');
        // Display hook for create/edit forms.
        $bundle->addEvent('form_edit', 'muboard.ui_hooks.ranks.form_edit');
        // Display hook for delete dialogues.
        $bundle->addEvent('form_delete', 'muboard.ui_hooks.ranks.form_delete');
        // Validate input from an ui create/edit form.
        $bundle->addEvent('validate_edit', 'muboard.ui_hooks.ranks.validate_edit');
        // Validate input from an ui create/edit form (generally not used).
        $bundle->addEvent('validate_delete', 'muboard.ui_hooks.ranks.validate_delete');
        // Perform the final update actions for a ui create/edit form.
        $bundle->addEvent('process_edit', 'muboard.ui_hooks.ranks.process_edit');
        // Perform the final delete actions for a ui form.
        $bundle->addEvent('process_delete', 'muboard.ui_hooks.ranks.process_delete');
        $this->registerHookSubscriberBundle($bundle);

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.muboard.filter_hooks.ranks', 'filter_hooks', __('muboard Ranks Filter Hooks'));
        // A filter applied to the given area.
        $bundle->addEvent('filter', 'muboard.filter_hooks.ranks.filter');
        $this->registerHookSubscriberBundle($bundle);

    }
}

