<?php
/**
 * MUBoard.
 *
 * @copyright Michael Ueberschaer
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUBoard
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Sun Oct 14 15:42:51 CEST 2012.
 */

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use DoctrineExtensions\StandardFields\Mapping\Annotation as ZK;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for rank entities.
 *
 * @abstract
 */
abstract class MUBoard_Entity_Base_Rank extends Zikula_EntityAccess
{

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'rank';

    /**
     * @var array List of primary key field names
     */
    protected $_idFields = array();

    /**
     * @var MUBoard_Entity_Validator_Rank The validator for this entity
     */
    protected $_validator = null;

    /**
     * @var boolean Whether this entity supports unique slugs
     */
    protected $_hasUniqueSlug = false;

    /**
     * @var array List of available item actions
     */
    protected $_actions = array();



    /**
     * @ORM\Id
     * @ORM\GeneratedValue
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id.
     */
    protected $id = 0;


    /**
     * @ORM\Column(length=100)
     * @var string $name.
     */
    protected $name = '';


    /**
     * @ORM\Column(type="bigint")
     * @var bigint $minPostings.
     */
    protected $minPostings = 0;


    /**
     * @ORM\Column(type="bigint")
     * @var bigint $maxPostings.
     */
    protected $maxPostings = 0;


    /**
     * @ORM\Column(type="smallint")
     * @var smallint $numberOfIcons.
     */
    protected $numberOfIcons = 0;
    /**
     * Upload image meta data array.
     *
     * @ORM\Column(type="array")
     * @var array $uploadImageMeta.
     */
    protected $uploadImageMeta = array();



    /**
     * @ORM\Column(length=255)
     * @var string $uploadImage.
     */
    protected $uploadImage = '';

    /**
     * The full path to the upload image.
     *
     * @var string $uploadImageFullPath.
     */
    protected $uploadImageFullPath = '';

    /**
     * Full upload image path as url.
     *
     * @var string $uploadImageFullPathUrl.
     */
    protected $uploadImageFullPathUrl = '';


    /**
     * @ORM\Column(type="boolean")
     * @var boolean $special.
     */
    protected $special = false;


    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="create")
     * @var integer $createdUserId.
     */
    protected $createdUserId;

    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="update")
     * @var integer $updatedUserId.
     */
    protected $updatedUserId;

    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="create")
     * @var datetime $createdDate.
     */
    protected $createdDate;

    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="update")
     * @var datetime $updatedDate.
     */
    protected $updatedDate;




    /**
     * Bidirectional - One rank [rank] has many user [users] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="MUBoard_Entity_User", mappedBy="rank")
     * @ORM\JoinTable(name="muboard_rankuser")
     * @var MUBoard_Entity_User[] $user.
     */
    protected $user = null;

    /**
     * Constructor.
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
        $this->id = 1;
        $this->numberOfIcons = 1;
        $this->_idFields = array('id');
        $this->initValidator();
        $this->_hasUniqueSlug = false;
        $this->user = new ArrayCollection();
    }

    /**
     * Get _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }

    /**
     * Set _object type.
     *
     * @param string $_objectType.
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        $this->_objectType = $_objectType;
    }


    /**
     * Get _id fields.
     *
     * @return array
     */
    public function get_idFields()
    {
        return $this->_idFields;
    }

    /**
     * Set _id fields.
     *
     * @param array $_idFields.
     *
     * @return void
     */
    public function set_idFields(array $_idFields = Array())
    {
        $this->_idFields = $_idFields;
    }


    /**
     * Get _validator.
     *
     * @return MUBoard_Entity_Validator_Rank
     */
    public function get_validator()
    {
        return $this->_validator;
    }

    /**
     * Set _validator.
     *
     * @param MUBoard_Entity_Validator_Rank $_validator.
     *
     * @return void
     */
    public function set_validator(MUBoard_Entity_Validator_Rank $_validator = null)
    {
        $this->_validator = $_validator;
    }


    /**
     * Get _has unique slug.
     *
     * @return boolean
     */
    public function get_hasUniqueSlug()
    {
        return $this->_hasUniqueSlug;
    }

    /**
     * Set _has unique slug.
     *
     * @param boolean $_hasUniqueSlug.
     *
     * @return void
     */
    public function set_hasUniqueSlug($_hasUniqueSlug)
    {
        $this->_hasUniqueSlug = $_hasUniqueSlug;
    }


    /**
     * Get _actions.
     *
     * @return array
     */
    public function get_actions()
    {
        return $this->_actions;
    }

    /**
     * Set _actions.
     *
     * @param array $_actions.
     *
     * @return void
     */
    public function set_actions(array $_actions = Array())
    {
        $this->_actions = $_actions;
    }



    /**
     * Get id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set id.
     *
     * @param integer $id.
     *
     * @return void
     */
    public function setId($id)
    {
        if ($id != $this->id) {
            $this->id = $id;
        }
    }

    /**
     * Get name.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set name.
     *
     * @param string $name.
     *
     * @return void
     */
    public function setName($name)
    {
        if ($name != $this->name) {
            $this->name = $name;
        }
    }

    /**
     * Get min postings.
     *
     * @return bigint
     */
    public function getMinPostings()
    {
        return $this->minPostings;
    }

    /**
     * Set min postings.
     *
     * @param bigint $minPostings.
     *
     * @return void
     */
    public function setMinPostings($minPostings)
    {
        if ($minPostings != $this->minPostings) {
            $this->minPostings = $minPostings;
        }
    }

    /**
     * Get max postings.
     *
     * @return bigint
     */
    public function getMaxPostings()
    {
        return $this->maxPostings;
    }

    /**
     * Set max postings.
     *
     * @param bigint $maxPostings.
     *
     * @return void
     */
    public function setMaxPostings($maxPostings)
    {
        if ($maxPostings != $this->maxPostings) {
            $this->maxPostings = $maxPostings;
        }
    }

    /**
     * Get number of icons.
     *
     * @return smallint
     */
    public function getNumberOfIcons()
    {
        return $this->numberOfIcons;
    }

    /**
     * Set number of icons.
     *
     * @param smallint $numberOfIcons.
     *
     * @return void
     */
    public function setNumberOfIcons($numberOfIcons)
    {
        if ($numberOfIcons != $this->numberOfIcons) {
            $this->numberOfIcons = $numberOfIcons;
        }
    }

    /**
     * Get upload image.
     *
     * @return string
     */
    public function getUploadImage()
    {
        return $this->uploadImage;
    }

    /**
     * Set upload image.
     *
     * @param string $uploadImage.
     *
     * @return void
     */
    public function setUploadImage($uploadImage)
    {
        if ($uploadImage != $this->uploadImage) {
            $this->uploadImage = $uploadImage;
        }
    }

    /**
     * Get upload image full path.
     *
     * @return string
     */
    public function getUploadImageFullPath()
    {
        return $this->uploadImageFullPath;
    }

    /**
     * Set upload image full path.
     *
     * @param string $uploadImageFullPath.
     *
     * @return void
     */
    public function setUploadImageFullPath($uploadImageFullPath)
    {
        if ($uploadImageFullPath != $this->uploadImageFullPath) {
            $this->uploadImageFullPath = $uploadImageFullPath;
        }
    }

    /**
     * Get upload image full path url.
     *
     * @return string
     */
    public function getUploadImageFullPathUrl()
    {
        return $this->uploadImageFullPathUrl;
    }

    /**
     * Set upload image full path url.
     *
     * @param string $uploadImageFullPathUrl.
     *
     * @return void
     */
    public function setUploadImageFullPathUrl($uploadImageFullPathUrl)
    {
        if ($uploadImageFullPathUrl != $this->uploadImageFullPathUrl) {
            $this->uploadImageFullPathUrl = $uploadImageFullPathUrl;
        }
    }

    /**
     * Get upload image meta.
     *
     * @return array
     */
    public function getUploadImageMeta()
    {
        return $this->uploadImageMeta;
    }

    /**
     * Set upload image meta.
     *
     * @param array $uploadImageMeta.
     *
     * @return void
     */
    public function setUploadImageMeta($uploadImageMeta = Array())
    {
        if ($uploadImageMeta != $this->uploadImageMeta) {
            $this->uploadImageMeta = $uploadImageMeta;
        }
    }

    /**
     * Get special.
     *
     * @return boolean
     */
    public function getSpecial()
    {
        return $this->special;
    }

    /**
     * Set special.
     *
     * @param boolean $special.
     *
     * @return void
     */
    public function setSpecial($special)
    {
        if ($special !== $this->special) {
            $this->special = (bool)$special;
        }
    }


    /**
     * Get created user id.
     *
     * @return integer[]
     */
    public function getCreatedUserId()
    {
        return $this->createdUserId;
    }

    /**
     * Set created user id.
     *
     * @param integer[] $createdUserId.
     *
     * @return void
     */
    public function setCreatedUserId($createdUserId)
    {
        $this->createdUserId = $createdUserId;
    }

    /**
     * Get updated user id.
     *
     * @return integer[]
     */
    public function getUpdatedUserId()
    {
        return $this->updatedUserId;
    }

    /**
     * Set updated user id.
     *
     * @param integer[] $updatedUserId.
     *
     * @return void
     */
    public function setUpdatedUserId($updatedUserId)
    {
        $this->updatedUserId = $updatedUserId;
    }

    /**
     * Get created date.
     *
     * @return datetime[]
     */
    public function getCreatedDate()
    {
        return $this->createdDate;
    }

    /**
     * Set created date.
     *
     * @param datetime[] $createdDate.
     *
     * @return void
     */
    public function setCreatedDate($createdDate)
    {
        $this->createdDate = $createdDate;
    }

    /**
     * Get updated date.
     *
     * @return datetime[]
     */
    public function getUpdatedDate()
    {
        return $this->updatedDate;
    }

    /**
     * Set updated date.
     *
     * @param datetime[] $updatedDate.
     *
     * @return void
     */
    public function setUpdatedDate($updatedDate)
    {
        $this->updatedDate = $updatedDate;
    }


    /**
     * Get user.
     *
     * @return MUBoard_Entity_User[]
     */
    public function getUser()
    {
        return $this->user;
    }

    /**
     * Set user.
     *
     * @param MUBoard_Entity_User[] $user.
     *
     * @return void
     */
    public function setUser($user)
    {
        $this->user = $user;
    }


    /**
     * Adds an instance of MUBoard_Entity_User to the list of user.
     *
     * @param MUBoard_Entity_User $user.
     *
     * @return void
     */
    public function addUser(MUBoard_Entity_User $user)
    {
        $this->user[] = $user;
    }

    /**
     * Removes an instance of MUBoard_Entity_User from the list of user.
     *
     * @param MUBoard_Entity_User $user.
     *
     * @return void
     */
    public function removeUser(MUBoard_Entity_User $user)
    {
        $this->user->removeElement($user);
    }

    /**
     * Removes an instance of MUBoard_Entity_User from the list of user by it's identifier.
     *
     * @param integer $user.
     *
     * @return void
     */
    public function removeUserById($id)
    {
        $this->user->remove($id);
    }



    /**
     * Initialise validator and return it's instance.
     *
     * @return MUBoard_Entity_Validator_Rank The validator for this entity.
     */
    public function initValidator()
    {
        if (!is_null($this->_validator)) {
            return $this->_validator;
        }
        $this->_validator = new MUBoard_Entity_Validator_Rank($this);
        return $this->_validator;
    }

    /**
     * Start validation and raise exception if invalid data is found.
     *
     * @return void.
     */
    public function validate()
    {
        $result = $this->initValidator()->validateAll();
        if (is_array($result)) {
            throw new Zikula_Exception($result['message'], $result['code'], $result['debugArray']);
        }
    }

    /**
     * Return entity data in JSON format.
     *
     * @return string JSON-encoded data.
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Collect available actions for this entity.
     */
    protected function prepareItemActions()
    {
        if (!empty($this->_actions)) {
            return;
        }

        $currentType = FormUtil::getPassedValue('type', 'user', 'GETPOST', FILTER_SANITIZE_STRING);
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
        $dom = ZLanguage::getModuleDomain('MUBoard');
        if ($currentType == 'admin') {
            if (in_array($currentFunc, array('main', 'view'))) {
                    $this->_actions[] = array(
                        'url' => array('type' => 'user', 'func' => 'display', 'arguments' => array('ot' => 'rank', 'id' => $this['id'])),
                        'icon' => 'preview',
                        'linkTitle' => __('Open preview page', $dom),
                        'linkText' => __('Preview', $dom)
                    );
                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'display', 'arguments' => array('ot' => 'rank', 'id' => $this['id'])),
                        'icon' => 'display',
                        'linkTitle' => str_replace('"', '', $this['name']),
                        'linkText' => __('Details', $dom)
                    );
            }

            if (in_array($currentFunc, array('main', 'view', 'display'))) {
                if (SecurityUtil::checkPermission('MUBoard::', '.*', ACCESS_EDIT)) {

                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => array('ot' => 'rank', 'id' => $this['id'])),
                        'icon' => 'edit',
                        'linkTitle' => __('Edit', $dom),
                        'linkText' => __('Edit', $dom)
                    );
                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => array('ot' => 'rank', 'astemplate' => $this['id'])),
                        'icon' => 'saveas',
                        'linkTitle' => __('Reuse for new item', $dom),
                        'linkText' => __('Reuse', $dom)
                    );
                }
                if (SecurityUtil::checkPermission('MUBoard::', '.*', ACCESS_DELETE)) {
                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'delete', 'arguments' => array('ot' => 'rank', 'id' => $this['id'])),
                        'icon' => 'delete',
                        'linkTitle' => __('Delete', $dom),
                        'linkText' => __('Delete', $dom)
                    );
                }
            }
            if ($currentFunc == 'display') {
                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'view', 'arguments' => array('ot' => 'rank')),
                        'icon' => 'back',
                        'linkTitle' => __('Back to overview', $dom),
                        'linkText' => __('Back to overview', $dom)
                    );
            }
        }
        if ($currentType == 'user') {
            if (in_array($currentFunc, array('main', 'view'))) {
                    $this->_actions[] = array(
                        'url' => array('type' => 'user', 'func' => 'display', 'arguments' => array('ot' => 'rank', 'id' => $this['id'])),
                        'icon' => 'display',
                        'linkTitle' => str_replace('"', '', $this['name']),
                        'linkText' => __('Details', $dom)
                    );
            }

            if (in_array($currentFunc, array('main', 'view', 'display'))) {
                if (SecurityUtil::checkPermission('MUBoard::', '.*', ACCESS_EDIT)) {

                    $this->_actions[] = array(
                        'url' => array('type' => 'user', 'func' => 'edit', 'arguments' => array('ot' => 'rank', 'id' => $this['id'])),
                        'icon' => 'edit',
                        'linkTitle' => __('Edit', $dom),
                        'linkText' => __('Edit', $dom)
                    );
                    $this->_actions[] = array(
                        'url' => array('type' => 'user', 'func' => 'edit', 'arguments' => array('ot' => 'rank', 'astemplate' => $this['id'])),
                        'icon' => 'saveas',
                        'linkTitle' => __('Reuse for new item', $dom),
                        'linkText' => __('Reuse', $dom)
                    );
                }
            }
            if ($currentFunc == 'display') {
                    $this->_actions[] = array(
                        'url' => array('type' => 'user', 'func' => 'view', 'arguments' => array('ot' => 'rank')),
                        'icon' => 'back',
                        'linkTitle' => __('Back to overview', $dom),
                        'linkText' => __('Back to overview', $dom)
                    );
            }
        }
    }




    /**
     * Post-Process the data after the entity has been constructed by the entity manager.
     * The event happens after the entity has been loaded from database or after a refresh call.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no access to associations (not initialised yet)
     *
     * @see MUBoard_Entity_Rank::postLoadCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostLoadCallback()
    {
        // echo 'loaded a record ...';

        $currentType = FormUtil::getPassedValue('type', 'user', 'GETPOST', FILTER_SANITIZE_STRING);
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
        // initialise the upload handler
        $uploadManager = new MUBoard_UploadHandler();

        $this['id'] = (int) ((isset($this['id']) && !empty($this['id'])) ? DataUtil::formatForDisplay($this['id']) : 0);
    if ($currentFunc != 'edit') {
        $this['name'] = ((isset($this['name']) && !empty($this['name'])) ? DataUtil::formatForDisplayHTML($this['name']) : '');
    }
        $this['minPostings'] = (int) ((isset($this['minPostings']) && !empty($this['minPostings'])) ? DataUtil::formatForDisplay($this['minPostings']) : 0);
        $this['maxPostings'] = (int) ((isset($this['maxPostings']) && !empty($this['maxPostings'])) ? DataUtil::formatForDisplay($this['maxPostings']) : 0);
        $this['numberOfIcons'] = (int) ((isset($this['numberOfIcons']) && !empty($this['numberOfIcons'])) ? DataUtil::formatForDisplay($this['numberOfIcons']) : 0);
        if (!empty($this['uploadImage'])) {
            $basePath = MUBoard_Util_Controller::getFileBaseFolder('rank', 'uploadImage');
            $fullPath = $basePath .  $this['uploadImage'];
            $this['uploadImageFullPath'] = $fullPath;
            $this['uploadImageFullPathURL'] = System::getBaseUrl() . $fullPath;

            // just some backwards compatibility stuff
            if (!isset($this['uploadImageMeta']) || !is_array($this['uploadImageMeta']) || !count($this['uploadImageMeta'])) {
                // assign new meta data
                $this['uploadImageMeta'] = $uploadManager->readMetaDataForFile($this['uploadImage'], $fullPath);
            }
        }
        $this['special'] = (bool) $this['special'];
        $this->prepareItemActions();
        return true;
    }

    /**
     * Pre-Process the data prior to an insert operation.
     * The event happens before the entity managers persist operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no identifiers available if using an identity generator like sequences
     *     - Doctrine won't recognize changes on relations which are done here
     *       if this method is called by cascade persist
     *     - no creation of other entities allowed
     *
     * @see MUBoard_Entity_Rank::prePersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPrePersistCallback()
    {
        // echo 'inserting a record ...';
        $this->validate();
        return true;
    }

    /**
     * Post-Process the data after an insert operation.
     * The event happens after the entity has been made persistant.
     * Will be called after the database insert operations.
     * The generated primary key values are available.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *
     * @see MUBoard_Entity_Rank::postPersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostPersistCallback()
    {
        // echo 'inserted a record ...';
        return true;
    }

    /**
     * Pre-Process the data prior a delete operation.
     * The event happens before the entity managers remove operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see MUBoard_Entity_Rank::preRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreRemoveCallback()
    {
/*        // delete workflow for this entity
        $result = Zikula_Workflow_Util::deleteWorkflow($this);
        if ($result === false) {
            $dom = ZLanguage::getModuleDomain('MUBoard');
            return LogUtil::registerError(__('Error! Could not remove stored workflow.', $dom));
        }*/
        return true;
    }

    /**
     * Post-Process the data after a delete.
     * The event happens after the entity has been deleted.
     * Will be called after the database delete operations.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see MUBoard_Entity_Rank::postRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostRemoveCallback()
    {
        // echo 'deleted a record ...';
        // initialise the upload handler
        $uploadManager = new MUBoard_UploadHandler();

        $uploadFields = array('uploadImage');
        foreach ($uploadFields as $uploadField) {
            if (empty($this->$uploadField)) {
                continue;
            }

            // remove upload file (and image thumbnails)
            $uploadManager->deleteUploadFile('rank', $this, $uploadField);
        }
        return true;
    }

    /**
     * Pre-Process the data prior to an update operation.
     * The event happens before the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *     - changes on associations are not allowed and won't be recognized by flush
     *     - changes on properties won't be recognized by flush as well
     *     - no creation of other entities allowed
     *
     * @see MUBoard_Entity_Rank::preUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreUpdateCallback()
    {
        // echo 'updating a record ...';
        $this->validate();
        return true;
    }

    /**
     * Post-Process the data after an update operation.
     * The event happens after the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *
     * @see MUBoard_Entity_Rank::postUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostUpdateCallback()
    {
        // echo 'updated a record ...';
        return true;
    }

    /**
     * Pre-Process the data prior to a save operation.
     * This combines the PrePersist and PreUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see MUBoard_Entity_Rank::preSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreSaveCallback()
    {
        // echo 'saving a record ...';
        $this->validate();
        return true;
    }

    /**
     * Post-Process the data after a save operation.
     * This combines the PostPersist and PostUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see MUBoard_Entity_Rank::postSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostSaveCallback()
    {
        // echo 'saved a record ...';
        return true;
    }

}
