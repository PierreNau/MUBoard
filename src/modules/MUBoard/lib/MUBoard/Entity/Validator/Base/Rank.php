<?php
/**
 * MUBoard.
 *
 * @copyright Michael Ueberschaer
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUBoard
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Sun Oct 14 15:42:51 CEST 2012.
 */

/**
 * Validator class for encapsulating entity validation methods.
 *
 * This is the base validation class for rank entities.
 */
class MUBoard_Entity_Validator_Base_Rank extends MUBoard_Validator
{

    /**
     * Performs all validation rules.
     *
     * @return mixed either array with error information or true on success
     */
    public function validateAll()
    {
        $errorInfo = array('message' => '', 'code' => 0, 'debugArray' => array());
        $dom = ZLanguage::getModuleDomain('MUBoard');
        if (!$this->isStringNotLongerThan('name', 100)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('name', 100), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotEmpty('name')) {
            $errorInfo['message'] = __f('Error! Field value must not be empty (%s).', array('name'), $dom);
            return $errorInfo;
        }
        if (!$this->isValidInteger('minPostings')) {
            $errorInfo['message'] = __f('Error! Field value may only contain digits (%s).', array('minPostings'), $dom);
            return $errorInfo;
        }
        if (!$this->isNumberNotLongerThan('minPostings', 11)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('minPostings', 11), $dom);
            return $errorInfo;
        }
        if (!$this->isValidInteger('maxPostings')) {
            $errorInfo['message'] = __f('Error! Field value may only contain digits (%s).', array('maxPostings'), $dom);
            return $errorInfo;
        }
        if (!$this->isNumberNotLongerThan('maxPostings', 11)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('maxPostings', 11), $dom);
            return $errorInfo;
        }
        if (!$this->isValidInteger('numberOfIcons')) {
            $errorInfo['message'] = __f('Error! Field value may only contain digits (%s).', array('numberOfIcons'), $dom);
            return $errorInfo;
        }
        if (!$this->isNumberNotEmpty('numberOfIcons')) {
            $errorInfo['message'] = __f('Error! Field value must not be 0 (%s).', array('numberOfIcons'), $dom);
            return $errorInfo;
        }
        if (!$this->isNumberNotLongerThan('numberOfIcons', 2)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('numberOfIcons', 2), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('uploadImage', 255)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('uploadImage', 255), $dom);
            return $errorInfo;
        }
        if (!$this->isValidBoolean('special')) {
            $errorInfo['message'] = __f('Error! Field value must be a valid boolean (%s).', array('special'), $dom);
            return $errorInfo;
        }
        return true;
    }

    /**
     * Check for unique values.
     *
     * This method determines if there already exist ranks with the same rank.
     *
     * @param string $fieldName The name of the property to be checked
     * @return boolean result of this check, true if the given rank does not already exist
     */
    public function isUniqueValue($fieldName)
    {
        if (empty($this->entity[$fieldName])) {
            return false;
        }

        $serviceManager = ServiceUtil::getManager();
        $entityManager = $serviceManager->getService('doctrine.entitymanager');
        $repository = $entityManager->getRepository('MUBoard_Entity_Rank');

        $excludeid = $this->entity['id'];
        return $repository->detectUniqueState($fieldName, $this->entity[$fieldName], $excludeid);
    }

    /**
     * Get entity.
     *
     * @return Zikula_EntityAccess
     */
    public function getEntity()
    {
        return $this->entity;
    }

    /**
     * Set entity.
     *
     * @param Zikula_EntityAccess $entity.
     *
     * @return void
     */
    public function setEntity(Zikula_EntityAccess $entity = null)
    {
        $this->entity = $entity;
    }

}
