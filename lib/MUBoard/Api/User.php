<?php
/**
 * MUBoard.
 *
 * @copyright Michael Ueberschaer
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUBoard
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Fri Jun 15 09:09:36 CEST 2012.
 */

/**
 * This is the User api helper class.
 */
class MUBoard_Api_User extends MUBoard_Api_Base_User
{
    /**
     * get available User panel links
     *
     * @return array Array of admin links
     */
    public function getlinks()
    {
    	$func = $this->request->query->filter('func', 'main', FILTER_SANITIZE_STRING);
    	$ot = $this->request->query->filter('ot', 'category', FILTER_SANITIZE_STRING);
    	$forum = $this->request->query->filter('id', 0, FILTER_SANITIZE_NUMBER_INT); 
    	  	
        $links = array();

        if (SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_ADMIN)) {
            $links[] = array('url' => ModUtil::url($this->name, 'admin', 'main'),
                             'text' => $this->__('Backend'),
                             'title' => $this->__('Switch to administration area.'),
                             'class' => 'z-icon-es-options');
        }
        if (SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_READ)) {
            $links[] = array('url' => ModUtil::url($this->name, 'user', 'view', array('ot' => 'category')),
                             'text' => $this->__('Categories'),
                             'title' => $this->__('Category list'));
        }
        if (SecurityUtil::checkPermission($this->name . ':Forum:', $forum . '::', ACCESS_ADD) && $func == 'display' && $ot == 'forum') {
            $links[] = array('url' => ModUtil::url($this->name, 'user', 'edit', array('ot' => 'posting', 'forum' => $forum)),
                             'text' => $this->__('New issue'),
                             'title' => $this->__('Create a new issue'));
        }
        if (SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_OVERVIEW)) {
            $links[] = array('url' => ModUtil::url($this->name, 'search', 'moduleSearch', array('kind' => 'latestPostings')),
                             'text' => $this->__('Latest issues'),
                             'title' => $this->__('Look for latest issues'));
        }
        if (SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_OVERVIEW)) {
        	$links[] = array('url' => ModUtil::url($this->name, 'search', 'moduleSearch'),
        			'text' => $this->__('Search issues'),
        			'title' => $this->__('Look for relevant issues'));
        }
        /*if (SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_READ)) {
            $links[] = array('url' => ModUtil::url($this->name, 'user', 'view', array('ot' => 'forum')),
                             'text' => $this->__('Forums'),
                             'title' => $this->__('Forum list'));
        }
        if (SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_READ)) {
            $links[] = array('url' => ModUtil::url($this->name, 'user', 'view', array('ot' => 'posting')),
                             'text' => $this->__('Postings'),
                             'title' => $this->__('Posting list'));
        }*/
        return $links;
    }
    
    /**
     * Form custom url string
     *
     * @return       string custom url string
     */
    public function encodeurl($args)
    {
        // check if we have the required input
        if (!is_array($args) || !isset($args['modname']) || !isset($args['func'])) {
            return LogUtil::registerArgsError();
        }
    
        // set default values
        if (!isset($args['type'])) {
            $args['type'] = 'user';
        }
        if (!isset($args['args'])) {
            $args['args'] = array();
        }
    
        // return if function url scheme is not being customised
        $customFuncs = array('view', 'display');
        if (!in_array($args['func'], $customFuncs)) {
            return false;
        }
    
        // reference to current language
        $lang = ZLanguage::getLanguageCode();
    
        // initialise url routing rules
        $routerFacade = new MUBoard_RouterFacade();
        // get router itself for convenience
        $router = $routerFacade->getRouter();
    
        // initialise object type
        $utilArgs = array('controller' => 'user', 'action' => 'encodeurl');
        $allowedObjectTypes = MUBoard_Util_Controller::getObjectTypes('api', $utilArgs);
        $objectType = ((isset($args['args']['ot']) && in_array($args['args']['ot'], $allowedObjectTypes)) ? $args['args']['ot'] : MUBoard_Util_Controller::getDefaultObjectType('api', $utilArgs));
    
        // initialise group folder
        $groupFolder = $routerFacade->getGroupingFolderFromObjectType($objectType, $args['func'], $args['args']);
    
        // start pre processing
    
        // convert object type to group folder
        $args['args']['ot'] = $groupFolder;
    
        // handle special templates
        $displayDefaultEnding = '';
        $endingPrefix = ($args['func'] == 'view') ? '.' : '';
        foreach (array('csv', 'rss', 'atom', 'xml', 'pdf', 'json') as $ending) {
            if (!isset($args['args']['use' . $ending . 'ext'])) {
                continue;
            }
            if ($args['args']['use' . $ending . 'ext'] == '1') {
                $args['args'][$args['func'] . 'ending'] = $endingPrefix . $ending;
            }
            unset($args['args']['use' . $ending . 'ext']);
        }
        // fallback to default templates
        if (!isset($args['args'][$args['func'] . 'ending'])) {
            if ($args['func'] == 'view') {
                $args['args'][$args['func'] . 'ending'] = ''; //'/';
            } else if ($args['func'] == 'display') {
                $args['args'][$args['func'] . 'ending'] = $displayDefaultEnding;
            }
        }
    
        if ($args['func'] == 'view') {
            // TODO filter views (e.g. /orders/customer/mr-smith.csv)
            /**
             $filterEntities = array('customer', 'region', 'federalstate', 'country');
             foreach ($filterEntities as $filterEntity) {
             $filterField = $filterEntity . 'id';
             if (!isset($args['args'][$filterField]) || !$args['args'][$filterField]) {
             continue;
             }
             $filterId = $args['args'][$filterField];
             unset($args['args'][$filterField]);
    
             $filterGroupFolder = $routerFacade->getGroupingFolderFromObjectType($filterEntity, 'display', $args['args']);
             $filterSlug = $routerFacade->getFormattedSlug($filterEntity, 'display', $args['args'], $filterId);
             $result .= $filterGroupFolder . '/' . $filterSlug .'/';
             break;
             }
             */
        } elseif ($args['func'] == 'display') {
            // determine given id
            $id = 0;
            foreach (array('id', strtolower($objectType) . 'id', 'objectid') as $idFieldName) {
                if (isset($args['args'][$idFieldName])) {
                    $id = $args['args'][$idFieldName];
                    unset($args['args'][$idFieldName]);
                }
            }
    
            $slugTitle = '';
            if ($id > 0) {
                $slugTitle = $routerFacade->getFormattedSlug($objectType, $args['func'], $args['args'], $id);
            }
    
            if (!empty($slugTitle) && $slugTitle != $id) {
                // add slug expression
                $args['args']['title'] = $slugTitle;
            } else {
                // readd id
                $args['args']['id'] = $id;
            }
        }
    
        // add func as first argument
        $routerArgs = array_merge(array('func' => $args['func']), $args['args']);
    
        // now create url based on params
        $result = $router->generate(null, $routerArgs);
    
        // post processing
        if (($args['func'] == 'view' && !empty($args['args']['viewending'])) || $args['func'] == 'display') {
            // check if url ends with a trailing slash
            if (substr($result, -1) == '/') {
                // remove the trailing slash
                $result = substr($result, 0, strlen($result) - 1);
            }
        }
    
        // enforce url name of the module, but do only 1 replacement to avoid changing other params
        $modInfo = ModUtil::getInfoFromName('MUBoard');
        $result = preg_replace('/' . $modInfo['name'] . '/', $modInfo['url'], $result, 1);
    
        return $result;
    }
}
